// ListText.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <list>
#include <iostream>
#include <iterator>
#include <time.h>
#include <set>
#include <map>//有map和multimap
#include <unordered_map>//只有unorder map和unorder——multiMap
#include <unordered_set>//
#include <vector>
#include <utility>
#include <string>
using namespace std;

pair<string,int> process(vector<string>& v)
{
	if (v.empty())
	{
		return pair<string,int>(v.back(),v.back().size());    //???
		//return make_pair(v.back(),v,back().size());
	}

}
int _tmain(int argc, _TCHAR* argv[])
{
	list<int> myList;
	clock_t start,end;
	start=clock();
	for (int i=0;i<1000001;i++)
	{
		myList.push_back(i);
	}
	end=clock();
	cout<<end-start<<endl;
	start=clock();
	for (int i=0;i<1000001;i++)
	{
		myList.push_back(i);
		myList.size();
	}
	end=clock();
	cout<<end-start<<endl;



	vector<int> ivect;
	for (size_t i=10;i<21;i++)
	{
		ivect.push_back(i);
		ivect.push_back(i);
	}

	set<int> imap;//(ivect.begin(),ivect.end());
	multiset<int> multimap(ivect.begin(),ivect.end());
	imap.insert(ivect.begin(),ivect.end());

	cout<<imap.size()<<endl;
	cout<<multimap.size()<<endl;
	pair<string,size_t> word_count;
	pair<string,string> author("tudou","dazhuzai");
	pair<string,string> anon=make_pair("ergeng","qiumo");
	cout<<author.first<<"   "<<author.second<<endl;

	pair<string,int> process(vector<string>& v);

	map<string,int> WordCounts;
	map<string,int>::mapped_type v1;
	map<string,int>::value_type v2;
	map<string,int>::key_type v3;
	pair<string,int> counts;

	//插入的方式初始化，c++ 11 列表初始化
	string word;
	while (cin>>word)
	{
	    //way 1
		WordCounts[word]=1;
		v1=WordCounts[word];
		v3=word;
		cout<<v3<<" times:"<<v1<<endl;
		//way 2
		++WordCounts[word];
		v1=WordCounts[word];
		v3=word;
		cout<<v3<<"times"<<v1<<endl;
		//cout<<v1<<endl;
		//way 3
		auto ret=WordCounts.insert(make_pair(word,1));
		if (ret.second)
		{
			++ret.first->second;
		}
		//way 4
		auto ret2=WordCounts.insert(map<string,int>::value_type(word,1));
		if (ret2.second)
		{
			++ret.first->second;
		}
		//way 5
		auto ret3=WordCounts.insert(pair<string,int>(word,1));
		if (ret3.second)
		{
			++ret3.first->second;
		}	
		auto ret4=WordCounts.begin();
		cout<<ret4->second<<"   "<<ret4->first<<endl;
		
	}
	string txt("jianai");
	auto PairValue=WordCounts.emplace(make_pair(txt,1));//pair 类型
	cout<<PairValue.first->first<<"   "<<PairValue.first->second<<endl;
	//下标
	cout<<WordCounts[word]<<endl;
	++WordCounts[word];
	cout<<WordCounts[word]<<endl;
	
	//访问元素 
	auto itor3=WordCounts.find(word);
	cout<<itor3->first<<"    "<<itor3->second<<endl;
	size_t mCount=WordCounts.count(word);
	WordCounts.at(word);
	set<int> iset;
	for (size_t i=0;i<10;i++)
	{
		iset.insert(i);
	}
	auto itor5=iset.find(3);
	cout<<*itor5<<endl;
	size_t iCount=iset.count(9);
	cout<<iCount<<endl;

	//删除元素
	map<string,int>::size_type nCount=WordCounts.erase(word);//0 or 1
	cout<<nCount<<endl;
	auto itor=WordCounts.begin();
	auto itor2=WordCounts.erase(itor);
	
	//可重复的的元素
	

	return 0;
}

